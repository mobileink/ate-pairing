load("@rules_cc//cc:defs.bzl", "cc_library")
load("@bazel_skylib//rules:common_settings.bzl",
     "bool_flag", "int_flag", "string_flag"
)
load("@ate_pairing//bzl:vars.bzl", "CFLAGS", "DDEBUG", "DEFINES", "SNARK")

# we put this here instead of in src because making distinct packages
# for src and include would break clients like libff that namespace
# includes, e.g. #include "ate-pairing/include/bn.h".
cc_library(
    name = "zm",
    srcs = [
        "src/zm.cpp",
        "include/zm.h",
        "src/zm2.cpp",
        "include/zm2.h",
        "include/bn.h",
        "include/cybozu/benchmark.hpp",
        "include/cybozu/inttype.hpp",
        "src/xbyak/xbyak.h",
        "src/xbyak/xbyak_mnemonic.h",
        "src/xbyak/xbyak_util.h"
    ],
    # hdrs = [
    #     "include/bn.h",
    #     "include/cybozu/benchmark.hpp",
    #     "include/cybozu/inttype.hpp",
    #     "include/zm.h",
    #     "include/zm2.h",
    # ],
    copts = CFLAGS,
    # some client include directives use this prefix, e.g. #include "ate-pairing/include/bn.h"
    include_prefix = "ate-pairing",
    includes = ["include", "src"],
    defines = DEFINES + SNARK,
    local_defines = DDEBUG,
    linkopts = select({
        "//bzl/host:macos": ["-Wl,-no_pie"],  # avoid PIE disabled warning
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
    deps = select({
        "//:enable_libgmp": ["//bzl/external/libgmp"],
        "//conditions:default": []
    })
)

#### Build Settings ####
bool_flag( name = "debug",
           build_setting_default = False)
config_setting( name = "enable_debug",
                flag_values = { ":debug": "true" })

string_flag( name = "curve",
             values = ["bn128", "alt_bn128", ""],
             build_setting_default = "")
config_setting( name = "curve_bn128",
                flag_values = { ":curve": "bn128" })
config_setting( name = "curve_alt_bn128",
                flag_values = { ":curve": "alt_bn128" })

bool_flag( name = "with_libgmp",
             build_setting_default = True)
config_setting( name = "enable_libgmp",
                flag_values = { ":with_libgmp": str(True) })

int_flag( name = "vuint_bit_len",
          build_setting_default = 0)
config_setting( name = "vuint_bit_len_1024",
                flag_values = { ":vuint_bit_len": str(1024) })
